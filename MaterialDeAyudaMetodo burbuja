package MaterialDeAyuda;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class MetodoBurbuja {

public static void main(String[] args) {
	Scanner lectura = new Scanner(System.in);

	List<Integer> DNI = new ArrayList<>();

	// INGRESO DE DNIs
	while (true) {
		System.out.println("Ingrese numero de DNI");
		System.out.println("Ingrese FIN para finalizar");
		String respuesta = lectura.next();

		if (respuesta.equalsIgnoreCase("fin")) {
			break;
		}

		int pasarRespuestaAEntero = Integer.parseInt(respuesta);

		DNI.add(pasarRespuestaAEntero);

	}

	// INICIO ORDENAMIENTO BURBUJA (ASCENDENTE)
	for (int i = 0; i < (DNI.size() - 1); i++) {
		// Este for es para volver a comparar todos los elementos

		for (int j = 0; j < (DNI.size() - i - 1); j++) {
			// Este for SOLO me manda el numero mas grande a la posicion mas alta.

			/*
			 * arreglo.length - i - 1: elimina pasadas innecesarias ya que el valor mas alto
			 * siempre quedara en la ultima posicion desde el inicio del ordenamiento.
			 */

			if (DNI.get(j) > DNI.get(j + 1)) {
			
				// Intercambiar los elementos
				int temporal = DNI.get(j);
				// SI TENGO MAS DE UN ARRAY: String temporalNombre = nombre[j];

				/*
				 * temporal sirve para guardar por un momento al valor mas alto.
				 */

				DNI.set(j, DNI.get(j + 1));
				// SI TENGO MAS DE UN ARRAY: nombre[j] = nombre[j+1]

				// La primera posicion de las dos, toma el valor de la segunda (que es mas
				// chico).

				DNI.set(j + 1, temporal);
				// SI TENGO MAS DE UN ARRAY: nombre[j+1] = temporalNombre ;

				// La segunda posicion, toma el valor mas alto.
			}
		}
	}
	// FIN ORDENAMIENTO BURBUJA (ASCENDENTE)

	System.out.println("Lista ordenada ascendente" + DNI);

	// INICIO ORDENAMIENTO BURBUJA (DESCENDENTE)
	for (int i = 0; i < (DNI.size() - 1); i++) {
		// Este for es para volver a comparar todos los elementos

		for (int j = 0; j < (DNI.size() - i - 1); j++) {
			// Este for SOLO me manda el numero mas grande a la posicion mas alta.

			/*
			 * arreglo.length - i - 1: elimina pasadas innecesarias ya que el valor mas alto
			 * siempre quedara en la ultima posicion desde el inicio del ordenamiento.
			 */

			if (DNI.get(j) < DNI.get(j + 1)) {

				// Intercambiar los elementos
				int temporal = DNI.get(j);
				// SI TENGO MAS DE UN ARRAY: String temporalNombre = nombre[j];

				/*
				 * temporal sirve para guardar por un momento al valor mas alto.
				 */

				DNI.set(j, DNI.get(j + 1));
				// SI TENGO MAS DE UN ARRAY: nombre[j] = nombre[j+1]

				// La primera posicion de las dos, toma el valor de la segunda (que es mas
				// chico).

				DNI.set(j + 1, temporal);
				// SI TENGO MAS DE UN ARRAY: nombre[j+1] = temporalNombre ;

				// La segunda posicion, toma el valor mas alto.
			}
		}
	}
	// FIN ORDENAMIENTO BURBUJA (ASCENDENTE)

	System.out.println("Lista ordenada descendente" + DNI);

}}
